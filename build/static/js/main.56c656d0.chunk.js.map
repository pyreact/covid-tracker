{"version":3,"sources":["Table.js","InfoBox.js","util.js","Map.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["Table","countries","className","map","country","cases","numeral","format","InfoBox","title","isRed","active","total","props","Card","onClick","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","casesType","center","zoom","TileLayer","url","attribution","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variable","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.56c656d0.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Table.css';\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({countries}) {\r\n   return <div className=\"table\">\r\n            {countries.map(({country,cases}) =>(\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n       </div>\r\n    }\r\n\r\nexport default Table\r\n","import React from 'react';\r\nimport \"./InfoBox.css\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n    return (\r\n        <Card \r\n        onClick={props.onClick}\r\n        className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\r\n            <CardContent>\r\n                {/* Title */}\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>                     \r\n                {/* Number of cases */}\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n\r\n\r\n                {/* 1.2M Total */}\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from 'react'\r\nimport \"./Map.css\";\r\nimport {Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction map({ countries, casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n\r\n                <TileLayer \r\n                    url=\"http://{s}.tile.Openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />         \r\n                {showDataOnMap(countries, casesType)}                \r\n            </LeafletMap>            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default map\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = 'cases' ) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType] [date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType] [date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props}) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React, { useEffect, useState } from \"react\";\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\";\nimport \"./App.css\";\nimport Table from \"./Table\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({lat: 34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries,setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() =>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data =>{\n      setCountryInfo(data);\n    });\n  }, []);\n // https://disease.sh/v3/covid-19/countries\n\n useEffect(() =>{\n    //the code inside here will run once\n    //when the component loads and not again after\n    const getCountriesData = async () =>{\n       fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => ({          \n         name: country.country,\n         value: country.countryInfo.iso2,  \n        }));\n\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      });\n    };\n\n    getCountriesData();\n }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;  \n    setCountry(countryCode);\n\n    const url = \n      countryCode === 'worldwide' \n        ? \"https://disease.sh/v3/covid-19/all\" \n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data =>{\n      setCountryInfo(countryCode);     \n      setCountryInfo(data);\n\n      countryCode === \"worldwide\"\n          ? setMapCenter([34.80746, -40.4796])\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        countryCode === \"worldwide\" ? setMapZoom(3) : setMapZoom(4);\n\n      //setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      //setMapZoom(4);\n    })\n\n  }; \n  \n  console.log('COUNTRY CODE >>>>>', countryInfo);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n       <div className=\"app__header\">\n        <h1> Covid-19 Tracker </h1>\n         <FormControl className=\"app__dropdown\">\n          \n          <Select \n          variable=\"outlined\" \n          onChange={onCountryChange} \n          value={country}\n          >\n\n           {/* loop through all the countries and show the dropdown list of the country  */}\n           <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n           {\n            countries.map(country => (\n              <MenuItem value={country.value}>{country.name}</MenuItem>\n            ))\n          }\n\n         {/* <MenuItem value=\"worldwide\">worldwide</MenuItem>  \n          <MenuItem value=\"worldwide\">option 2</MenuItem>  \n          <MenuItem value=\"worldwide\">option 3</MenuItem>  \n          <MenuItem value=\"worldwide\">option 4</MenuItem> */} \n        </Select>\n      </FormControl>  \n      </div>             \n           \n      <div className=\"app__stats\">\n        <InfoBox \n        isRed \n        active={casesType === \"cases\"}\n        onClick={(e) => setCasesType('cases')} \n        title=\"Coronavirus Cases\"\n        cases ={prettyPrintStat(countryInfo.todayCases)} \n        total={prettyPrintStat(countryInfo.cases)}\n        />\n        <InfoBox \n        active={casesType === \"recovered\"}\n        onClick={(e) => setCasesType('recovered')}\n        title=\"Recovered\" \n        cases ={prettyPrintStat(countryInfo.todayRecovered)} \n        total={prettyPrintStat(countryInfo.recovered)}\n        />\n        <InfoBox\n        isRed\n        active={casesType === \"deaths\"} \n        onClick={(e) => setCasesType('deaths')}\n        title=\"Deaths\" \n        cases ={prettyPrintStat(countryInfo.todayDeaths)} \n        total={prettyPrintStat(countryInfo.deaths)}\n        />               \n      </div>  \n      \n\n\n      {/* Map */ }\n      <Map \n      casesType={casesType}\n      countries={mapCountries}\n      center={mapCenter}\n      zoom={mapZoom}\n      />    \n       </div>      \n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>        \n        {/* Table */}\n          <Table countries={tableData} />\n        <h3>Worldwide new {casesType}</h3>  \n        {/* Graph */ }\n        <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}